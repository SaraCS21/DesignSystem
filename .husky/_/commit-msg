
# Colors
RED=$(tput setaf 1)
BLUE=$(tput setaf 6)

echo "${BLUE}Checking commit..."

# Function for checking commit message conventions
commitMessageCheck() {
  echo "${BLUE}Checking commit message conventions..."
  commit_message_file=$1
  commit_message=$(cat "$commit_message_file")

  # Regex pattern for the commit message structure
  commit_message_regex="^(fix|feat|build|ci|docs|perf|refactor|style|test|chore)(\([^)]+\))?:\s([A-Z]{2} - )+[a-zA-Z0-9]+.*(\n?.*)+.*"

  if ! echo "$commit_message" | grep -qE "$commit_message_regex"; then
    echo ""
    echo "ðŸš¨ ${RED}Wrong commit message! ðŸ˜•"
    echo ""
    echo "The commit message must have this format:"
    echo ""
    echo "<type>[optional scope]: <ticket code> - <description>"
    echo "[optional body]"
    echo "[optional footer(s)]"
    echo ""
    echo "Allowed verbs in imperative mood: fix, feat, build, ci, docs, perf, refactor, style, test, chore"
    echo "Example: git commit -am  \"feat: CRK-1234 - Add new button\""
    echo ""
    echo "${BLUE}Your commit message was:"
    echo "${RED}$commit_message"
    echo ""
    echo "${BLUE}For more information, https://adedelivered.atlassian.net/l/cp/1PyrnFZ0${RED}"
    echo ""
    exit 1
  fi

  echo ""
  echo "${BLUE}Commit message check passed!"
  echo ""
}

# Call the functions as needed
COMMIT_MSG_FILE="$1"
commitMessageCheck "$COMMIT_MSG_FILE"

echo "Committing."
